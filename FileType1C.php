<?php

namespace BankStatement;

use BankStatement\Model\Cash;

class FileType1C extends FileTypeInterface
{
    var $charset;

    public function ReadFile(string $path)
    {
        parent::ReadFile($path); // TODO: Change the autogenerated stub
        $rawLine = file($path);
        if (trim($rawLine[0]) != '1CClientBankExchange')
            throw new Exception('Неверный тип файла (' . $rawLine[0] . ')');
        $rawLine[2] = explode('=', $rawLine[2]);
        if (count($rawLine[2]) != 2 || in_array(strtolower($rawLine[2][1]), ['windows', 'utf-8', 'dos']))
            throw new Exception('Ошибка кодировки (' . var_export($rawLine[2], true) . ')');
        $this->charset = trim(strtolower($rawLine[2][1]));
        if ($this->charset == 'windows') $this->charset = 'windows-1251';

        return $this->RowIteration($rawLine);
    }

    public function RowIteration(&$rows): array
    {
        $sectionStart = 0;
        $ret = array();
        $htm = [];
        for ($i = 3; $i < count($rows); $i++) {
            if ($this->charset != 'utf-8')
                $rows[$i] = iconv($this->charset, 'UTF-8', $rows[$i]);
            $rows[$i] = trim($rows[$i]);


            // выделяем секцию
            if (preg_match("/^СекцияДокумент=/u", $rows[$i])) {
                $sectionStart = $i;
                continue;
            }
            if ($rows[$i] == 'КонецДокумента') {
                $t = $this->SectionRead($rows, $sectionStart + 1, $i - 1);
                if ($t)
                    $ret[] = $t;
                continue;
            }
        }

        return $ret;
    }

    public function SectionRead(&$rows, $start, $end)
    {
        if ($start >= $end || count($rows) < $end)
            return null;

        $ret = new Cash();
        $ret->Direction = Cash::IN;
        for ($i = $start; $i < $end; $i++) {
            $value = explode('=', $rows[$i]);
            if (count($value) != 2)
                continue;
            if (preg_match('/^Плательщик.*?(ИНН|ИИН)$/u', $value[0]) && $value[1] == $this->IINBIN)
                $ret->Direction = Cash::OUT;
            if (preg_match('/^Получатель.*?(ИНН|ИИН)$/u', $value[0]) && $value[1] == $this->IINBIN)
                $ret->Direction = Cash::IN;
            if (empty($ret->Time) && preg_match('/^(Дата|ДатаПоступило|ДатаДокумента)$/u', $value[0]))
                $ret->Time = (int)$this->ToUixTime($value[1]);
            if ($value[0] == 'Сумма') {
                $ret->Summ = (float)$value[1];
            }
            $ret->Raw[] = $value;
        }
        return $ret;
    }

    private function ToUixTime(string $date)
    {
        return strtotime($date);
    }


}
